# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  _id: String!
  createdAt: DateTime!
  createdBy: String
  deleted: Boolean!
  deletedAt: DateTime
  deletedBy: String
  email: String!
  hashedPassword: String
  hashedRefreshToken: String
  role: Roles!
  status: AccountStatuses!
  updatedAt: DateTime!
  updatedBy: String
}

enum AccountStatuses {
  ACTIVE
  INACTIVE
  INVITED
}

type CategoriesPayload {
  collection: [Category!]!
  totalCount: Float!
}

type Category {
  _id: String!
  categoryName: String
  createdAt: DateTime!
  createdBy: String
  deleted: Boolean!
  deletedAt: DateTime
  deletedBy: String
  description: String
  name: String!
  parentCategoryId: ObjectId
  updatedAt: DateTime!
  updatedBy: String
}

input ChangeProductStatusInput {
  productId: ObjectId!
  status: String!
}

input CreateCategoryInput {
  description: String
  name: String!
  parentCategoryId: ObjectId
}

input CreateProductInput {
  categoryId: ObjectId
  description: String
  name: String!
  price: Float!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  role: Roles!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetCategoryFilterInput {
  searchTerm: String
}

input GetProductsFilterInput {
  categoryIds: [ObjectId!]
  searchTerm: String
  statuses: [String!]
}

input GetUsersFilterInput {
  roles: [String!]
  searchTerm: String
  statuses: [String!]
}

type Mutation {
  changeProductStatus(input: ChangeProductStatusInput!): Product!
  createCategory(input: CreateCategoryInput!): Category!
  createProduct(input: CreateProductInput!): Product!
  createUser(input: CreateUserInput!): User!
  deleteCategoryById(categoryId: ObjectId!): Boolean!
  deleteProductById(productId: ObjectId!): Boolean!
  deleteUser(userId: ObjectId!): Boolean!
  login(email: String!, password: String!): TokensModel!
  refreshTokens: TokensModel!
  resendUserInvitationEmail(userId: ObjectId!): User!
  updateCategory(input: UpdateCategoryInput!): Category!
  updateProduct(input: UpdateProductInput!): Product!
}

"""Mongo Object ID scalar type"""
scalar ObjectId

input PaginationInput {
  limit: Float! = 10
  skip: Float! = 0
}

type Product {
  _id: String!
  categoryId: ObjectId
  categoryName: String
  code: Float!
  createdAt: DateTime!
  createdBy: String
  deleted: Boolean!
  deletedAt: DateTime
  deletedBy: String
  description: String
  name: String!
  price: Float!
  rating: Float
  status: ProductStatuses!
  updatedAt: DateTime!
  updatedBy: String
}

enum ProductStatuses {
  ARCHIVED
  DRAFT
  PUBLISHED
}

type ProductsOutput {
  collection: [Product!]!
  totalCount: Float!
}

type Query {
  getCategories(filter: GetCategoryFilterInput, pagination: PaginationInput, sort: SortInput): CategoriesPayload!
  getCurrentUser: User!
  getProducts(filter: GetProductsFilterInput, pagination: PaginationInput, sort: SortInput): ProductsOutput!
  getUsers(filter: GetUsersFilterInput, pagination: PaginationInput, sort: SortInput): UsersOutput!
}

enum Roles {
  ADMIN
  USER
}

input SortInput {
  sortBy: String
  sortOrder: Float
}

type TokensModel {
  accessToken: String!
  refreshToken: String!
  refreshTokenExpiry: String
}

input UpdateCategoryInput {
  categoryId: ObjectId!
  description: String
  name: String
  parentCategoryId: ObjectId
}

input UpdateProductInput {
  categoryId: ObjectId
  description: String!
  name: String!
  price: Float!
  productId: ObjectId!
}

type User {
  _id: String!
  account: Account!
  accountId: ObjectId!
  createdAt: DateTime!
  createdBy: String
  deleted: Boolean!
  deletedAt: DateTime
  deletedBy: String
  firstName: String!
  lastName: String!
  updatedAt: DateTime!
  updatedBy: String
}

type UsersOutput {
  collection: [User!]!
  totalCount: Float!
}